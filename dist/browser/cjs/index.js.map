{"version":3,"file":"index.js","sources":["../../../node_modules/js-base64/base64.mjs","../../../build/MIMETextError.js","../../../build/Mailbox.js","../../../build/MIMEMessageHeader.js","../../../build/MIMEMessageContent.js","../../../build/MIMEMessage.js","../../../build/entrypoints/browser.js"],"sourcesContent":["/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.5';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 ยง5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 ยง5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins,\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n","export class MIMETextError extends Error {\n    name = '';\n    description = '';\n    constructor(message, description = '') {\n        super(description);\n        this.name = message;\n        this.description = description;\n    }\n}\n","import { MIMETextError } from '#src/MIMETextError';\nexport class Mailbox {\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/;\n    name = '';\n    addr = '';\n    type = 'To';\n    constructor(input, config = { type: 'To' }) {\n        this.type = config.type;\n        this.parse(input);\n    }\n    getAddrDomain() {\n        return this.addr.includes('@') ? this.addr.split('@')[1] : '';\n    }\n    dump() {\n        return this.name ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`;\n    }\n    parse(input) {\n        if (this.isMailboxAddrObject(input)) {\n            this.addr = input.addr;\n            if (typeof input.name === 'string')\n                this.name = input.name;\n            if (typeof input.type === 'string')\n                this.type = input.type;\n            return this;\n        }\n        if (this.isMailboxAddrText(input)) {\n            const text = input.trim();\n            if (text.slice(0, 1) == '<' && text.slice(-1) == '>') {\n                this.addr = text.slice(1, -1);\n                return this;\n            }\n            const arr = text.split(' <');\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0];\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0];\n            arr[1] = arr[1].slice(0, -1);\n            this.name = arr[0];\n            this.addr = arr[1];\n            return this;\n        }\n        if (typeof input === 'string') {\n            this.addr = input;\n            return this;\n        }\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.');\n    }\n    isMailboxAddrText(v) {\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v);\n    }\n    isMailboxAddrObject(v) {\n        return this.isObject(v) && Object.hasOwn(v, 'addr');\n    }\n    isObject(v) {\n        return (!!v) && (v.constructor === Object);\n    }\n}\n","import { MIMETextError } from '#src/MIMETextError';\nimport { Mailbox } from '#src/Mailbox';\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\nexport class MIMEMessageHeader {\n    envctx;\n    fields = [\n        {\n            name: 'Date',\n            generator: () => ((new Date()).toUTCString()).replace(/GMT|UTC/gi, '+0000')\n        },\n        {\n            name: 'From',\n            required: true,\n            validate: (v) => this.validateMailboxSingle(v),\n            dump: (v) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Sender',\n            validate: (v) => this.validateMailboxSingle(v),\n            dump: (v) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Reply-To',\n            validate: (v) => this.validateMailboxSingle(v),\n            dump: (v) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'To',\n            validate: (v) => this.validateMailboxMulti(v),\n            dump: (v) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Cc',\n            validate: (v) => this.validateMailboxMulti(v),\n            dump: (v) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Bcc',\n            validate: (v) => this.validateMailboxMulti(v),\n            dump: (v) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Message-ID',\n            generator: () => {\n                const randomstr = Math.random().toString(36).slice(2);\n                const from = this.fields.filter((obj) => obj.name === 'From')[0].value;\n                const domain = from.getAddrDomain();\n                return '<' + randomstr + '@' + domain + '>';\n            }\n        },\n        {\n            name: 'Subject',\n            required: true,\n            dump: (v) => {\n                return typeof v === 'string' ? '=?utf-8?B?' + this.envctx.toBase64(v) + '?=' : '';\n            }\n        },\n        {\n            name: 'MIME-Version',\n            generator: () => '1.0'\n        }\n    ];\n    constructor(envctx) {\n        this.envctx = envctx;\n    }\n    dump() {\n        let lines = '';\n        for (const field of this.fields) {\n            if (field.disabled)\n                continue;\n            const isValueDefinedByUser = field.value !== undefined && field.value !== null;\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError('MIMETEXT_MISSING_HEADER', `The \"${field.name}\" header is required.`);\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== 'function')\n                continue;\n            if (!isValueDefinedByUser && typeof field.generator === 'function')\n                field.value = field.generator();\n            const strval = Object.hasOwn(field, 'dump') && typeof field.dump === 'function'\n                ? field.dump(field.value)\n                : typeof field.value === 'string' ? field.value : '';\n            lines += `${field.name}: ${strval}${this.envctx.eol}`;\n        }\n        return lines.slice(0, -1 * this.envctx.eol.length);\n    }\n    toObject() {\n        return this.fields.reduce((memo, item) => {\n            memo[item.name] = item.value;\n            return memo;\n        }, {});\n    }\n    get(name) {\n        const fieldMatcher = (obj) => obj.name.toLowerCase() === name.toLowerCase();\n        const ind = this.fields.findIndex(fieldMatcher);\n        return ind !== -1 ? this.fields[ind].value : undefined;\n    }\n    set(name, value) {\n        const fieldMatcher = (obj) => obj.name.toLowerCase() === name.toLowerCase();\n        const isCustomHeader = !this.fields.some(fieldMatcher);\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher);\n            const field = this.fields[ind];\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_VALUE', 'You specified an invalid value for the header ' + name);\n            }\n            this.fields[ind].value = value;\n            return this.fields[ind];\n        }\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v) => typeof v === 'string' ? v : ''\n        });\n    }\n    setCustom(obj) {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== 'string') {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Custom header must have a value.');\n            }\n            this.fields.push(obj);\n            return obj;\n        }\n        throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'You specified an invalid header field object.');\n    }\n    validateMailboxSingle(v) {\n        return v instanceof Mailbox;\n    }\n    validateMailboxMulti(v) {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v);\n    }\n    dumpMailboxMulti(v) {\n        const dump = (item) => item.name.length === 0\n            ? item.dump()\n            : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return this.isArrayOfMailboxes(v) ? v.map(dump).join(`,${this.envctx.eol} `) : v instanceof Mailbox ? dump(v) : '';\n    }\n    dumpMailboxSingle(v) {\n        const dump = (item) => item.name.length === 0\n            ? item.dump()\n            : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`;\n        return v instanceof Mailbox ? dump(v) : '';\n    }\n    isHeaderField(v) {\n        const validProps = ['name', 'value', 'dump', 'required', 'disabled', 'generator', 'custom'];\n        if (this.isObject(v)) {\n            const h = v;\n            if (Object.hasOwn(h, 'name') && typeof h.name === 'string' && h.name.length > 0) {\n                if (!Object.keys(h).some((prop) => !validProps.includes(prop))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    isObject(v) {\n        return (!!v) && (v.constructor === Object);\n    }\n    isArrayOfMailboxes(v) {\n        return this.isArray(v) && v.every((item) => item instanceof Mailbox);\n    }\n    isArray(v) {\n        return (!!v) && (v.constructor === Array);\n    }\n}\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    fields = [\n        {\n            name: 'Content-ID'\n        },\n        {\n            name: 'Content-Type'\n        },\n        {\n            name: 'Content-Transfer-Encoding'\n        },\n        {\n            name: 'Content-Disposition'\n        }\n    ];\n    constructor(envctx) {\n        super(envctx);\n    }\n}\n","import { MIMEMessageContentHeader } from '#src/MIMEMessageHeader';\nexport class MIMEMessageContent {\n    envctx;\n    headers;\n    data;\n    constructor(envctx, data, headers = {}) {\n        this.envctx = envctx;\n        this.headers = new MIMEMessageContentHeader(this.envctx);\n        this.data = data;\n        this.setHeaders(headers);\n    }\n    dump() {\n        const eol = this.envctx.eol;\n        return this.headers.dump() + eol + eol + this.data;\n    }\n    isAttachment() {\n        const disposition = this.headers.get('Content-Disposition');\n        return typeof disposition === 'string' && disposition.includes('attachment');\n    }\n    isInlineAttachment() {\n        const disposition = this.headers.get('Content-Disposition');\n        return typeof disposition === 'string' && disposition.includes('inline');\n    }\n    setHeader(name, value) {\n        this.headers.set(name, value);\n        return name;\n    }\n    getHeader(name) {\n        return this.headers.get(name);\n    }\n    setHeaders(obj) {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]));\n    }\n    getHeaders() {\n        return this.headers.toObject();\n    }\n}\n","import { MIMETextError } from '#src/MIMETextError';\nimport { MIMEMessageHeader } from '#src/MIMEMessageHeader';\nimport { Mailbox } from '#src/Mailbox';\nimport { MIMEMessageContent } from '#src/MIMEMessageContent';\nexport class MIMEMessage {\n    envctx;\n    headers;\n    boundaries = { mixed: '', alt: '', related: '' };\n    validTypes = ['text/html', 'text/plain'];\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64'];\n    messages = [];\n    constructor(envctx) {\n        this.envctx = envctx;\n        this.headers = new MIMEMessageHeader(this.envctx);\n        this.messages = [];\n        this.generateBoundaries();\n    }\n    asRaw() {\n        const eol = this.envctx.eol;\n        const lines = this.headers.dump();\n        const plaintext = this.getMessageByType('text/plain');\n        const html = this.getMessageByType('text/html');\n        const primaryMessage = html ? html : plaintext ? plaintext : undefined;\n        if (primaryMessage === undefined) {\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.');\n        }\n        const hasAttachments = this.hasAttachments();\n        const hasInlineAttachments = this.hasInlineAttachments();\n        const structure = hasInlineAttachments && hasAttachments ? 'mixed+related'\n            : hasAttachments ? 'mixed'\n                : hasInlineAttachments ? 'related'\n                    : plaintext && html ? 'alternative'\n                        : '';\n        if (structure === 'mixed+related') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length);\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length);\n            return lines + eol\n                + 'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol\n                + eol\n                + '--' + this.boundaries.mixed + eol\n                + 'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol\n                + eol\n                + this.dumpTextContent(plaintext, html, this.boundaries.related) + eol\n                + eol\n                + inlineAttachments\n                + '--' + this.boundaries.related + '--' + eol\n                + attachments\n                + '--' + this.boundaries.mixed + '--';\n        }\n        else if (structure === 'mixed') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length);\n            return lines + eol\n                + 'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol\n                + eol\n                + this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol\n                + (plaintext && html ? '' : eol)\n                + attachments\n                + '--' + this.boundaries.mixed + '--';\n        }\n        else if (structure === 'related') {\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length);\n            return lines + eol\n                + 'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol\n                + eol\n                + this.dumpTextContent(plaintext, html, this.boundaries.related) + eol\n                + eol\n                + inlineAttachments\n                + '--' + this.boundaries.related + '--';\n        }\n        else if (structure === 'alternative') {\n            return lines + eol\n                + 'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol\n                + eol\n                + this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol\n                + eol\n                + '--' + this.boundaries.alt + '--';\n        }\n        else {\n            return lines + eol + primaryMessage.dump();\n        }\n    }\n    asEncoded() {\n        return this.envctx.toBase64WebSafe(this.asRaw());\n    }\n    dumpTextContent(plaintext, html, boundary) {\n        const eol = this.envctx.eol;\n        const primaryMessage = html ? html : plaintext;\n        let data = '';\n        if (plaintext && html && !this.hasInlineAttachments() && this.hasAttachments())\n            data = '--' + boundary + eol\n                + 'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol\n                + eol\n                + '--' + this.boundaries.alt + eol\n                + plaintext.dump() + eol\n                + eol\n                + '--' + this.boundaries.alt + eol\n                + html.dump() + eol\n                + eol\n                + '--' + this.boundaries.alt + '--';\n        else if (plaintext && html && this.hasInlineAttachments())\n            data = '--' + boundary + eol\n                + html.dump();\n        else if (plaintext && html)\n            data = '--' + boundary + eol\n                + plaintext.dump() + eol\n                + eol\n                + '--' + boundary + eol\n                + html.dump();\n        else\n            data = '--' + boundary + eol\n                + primaryMessage.dump();\n        return data;\n    }\n    hasInlineAttachments() {\n        return this.messages.some((msg) => msg.isInlineAttachment());\n    }\n    hasAttachments() {\n        return this.messages.some((msg) => msg.isAttachment());\n    }\n    getAttachments() {\n        const matcher = (msg) => msg.isAttachment();\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : [];\n    }\n    getInlineAttachments() {\n        const matcher = (msg) => msg.isInlineAttachment();\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : [];\n    }\n    getMessageByType(type) {\n        const matcher = (msg) => (msg.getHeader('Content-Type') || '').includes(type);\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined;\n    }\n    addAttachment(opts) {\n        if (!this.isObject(opts.headers))\n            opts.headers = {};\n        if (typeof opts.filename !== 'string') {\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property filename must exist while adding attachments.');\n        }\n        let type = opts.headers['Content-Type'] || opts.contentType || 'none';\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`);\n        }\n        const encoding = opts.headers['Content-Transfer-Encoding'] || opts.encoding || 'base64';\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream';\n        }\n        const contentId = opts.headers['Content-ID'];\n        if (typeof contentId === 'string' && contentId.length > 2 && contentId.slice(0, 1) !== '<' && contentId.slice(-1) !== '>') {\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>';\n        }\n        const disposition = opts.inline ? 'inline' : 'attachment';\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; name=\"${opts.filename}\"`,\n            'Content-Transfer-Encoding': encoding,\n            'Content-Disposition': `${disposition}; filename=\"${opts.filename}\"`\n        });\n        return this._addMessage({ data: opts.data, headers: opts.headers });\n    }\n    addMessage(opts) {\n        if (!this.isObject(opts.headers))\n            opts.headers = {};\n        let type = opts.headers['Content-Type'] || opts.contentType || 'none';\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`);\n        }\n        const encoding = opts.headers['Content-Transfer-Encoding'] || opts.encoding || '7bit';\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream';\n        }\n        const charset = opts.charset || 'UTF-8';\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; charset=${charset}`,\n            'Content-Transfer-Encoding': encoding\n        });\n        return this._addMessage({ data: opts.data, headers: opts.headers });\n    }\n    _addMessage(opts) {\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers);\n        this.messages.push(msg);\n        return msg;\n    }\n    setSender(input, config = { type: 'From' }) {\n        const mailbox = new Mailbox(input, config);\n        this.setHeader('From', mailbox);\n        return mailbox;\n    }\n    getSender() {\n        return this.getHeader('From');\n    }\n    setRecipients(input, config = { type: 'To' }) {\n        const arr = !this.isArray(input) ? [input] : input;\n        const recs = arr.map((_input) => new Mailbox(_input, config));\n        this.setHeader(config.type, recs);\n        return recs;\n    }\n    getRecipients(config = { type: 'To' }) {\n        return this.getHeader(config.type);\n    }\n    setRecipient(input) {\n        return this.setRecipients(input, { type: 'To' });\n    }\n    setTo(input) {\n        return this.setRecipients(input, { type: 'To' });\n    }\n    setCc(input) {\n        return this.setRecipients(input, { type: 'Cc' });\n    }\n    setBcc(input) {\n        return this.setRecipients(input, { type: 'Bcc' });\n    }\n    setSubject(value) {\n        this.setHeader('subject', value);\n        return value;\n    }\n    getSubject() {\n        return this.getHeader('subject');\n    }\n    setHeader(name, value) {\n        this.headers.set(name, value);\n        return name;\n    }\n    getHeader(name) {\n        return this.headers.get(name);\n    }\n    setHeaders(obj) {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]));\n    }\n    getHeaders() {\n        return this.headers.toObject();\n    }\n    toBase64(v) {\n        return this.envctx.toBase64(v);\n    }\n    toBase64WebSafe(v) {\n        return this.envctx.toBase64WebSafe(v);\n    }\n    generateBoundaries() {\n        this.boundaries = {\n            mixed: Math.random().toString(36).slice(2),\n            alt: Math.random().toString(36).slice(2),\n            related: Math.random().toString(36).slice(2)\n        };\n    }\n    isArray(v) {\n        return (!!v) && (v.constructor === Array);\n    }\n    isObject(v) {\n        return (!!v) && (v.constructor === Object);\n    }\n}\n","import { Base64 } from 'js-base64';\nimport { MIMEMessage } from '#src/MIMEMessage';\nconst envctx = {\n    toBase64: function toBase64(data) {\n        return Base64.encode(data);\n    },\n    toBase64WebSafe: function toBase64WebSafe(data) {\n        return Base64.encodeURI(data);\n    },\n    eol: '\\r\\n',\n    validateContentType: (v) => {\n        return v.length > 0 ? v : false;\n    }\n};\nexport function createMimeMessage() {\n    return new MIMEMessage(envctx);\n}\nexport { MIMEMessage } from '#src/MIMEMessage';\nexport { Mailbox } from '#src/Mailbox';\nexport { MIMETextError } from '#src/MIMETextError';\nexport { MIMEMessageHeader } from '#src/MIMEMessageHeader';\nexport { MIMEMessageContent } from '#src/MIMEMessageContent';\n"],"names":["MIMETextError","_Error","_inherits","_super","_createSuper","message","_this","description","arguments","length","undefined","_classCallCheck","call","_defineProperty","_assertThisInitialized","name","_createClass","_wrapNativeSuper","Error","Mailbox","input","config","type","parse","key","value","getAddrDomain","_context","_includesInstanceProperty","addr","split","dump","_context2","_concatInstanceProperty","concat","isMailboxAddrObject","isMailboxAddrText","_context3","_context4","_context5","text","_trimInstanceProperty","_sliceInstanceProperty","arr","test","v","reSpecCompliantAddr","isObject","Object","hasOwn","constructor","MIMEMessageHeader","envctx","generator","Date","toUTCString","replace","required","validate","validateMailboxSingle","dumpMailboxSingle","validateMailboxMulti","dumpMailboxMulti","randomstr","Math","random","toString","from","_filterInstanceProperty","fields","obj","domain","toBase64","lines","_iterator","_createForOfIteratorHelper","_step","s","n","done","field","disabled","isValueDefinedByUser","strval","eol","err","e","f","toObject","_reduceInstanceProperty","memo","item","get","_context6","fieldMatcher","toLowerCase","ind","_findIndexInstanceProperty","set","isCustomHeader","some","_context7","setCustom","custom","isHeaderField","push","isArrayOfMailboxes","_this2","_context8","_mapInstanceProperty","join","_this3","_context9","validProps","h","_Object$keys","prop","isArray","every","Array","MIMEMessageContentHeader","_MIMEMessageHeader","_this4","MIMEMessageContent","data","headers","setHeaders","isAttachment","disposition","isInlineAttachment","setHeader","getHeader","getHeaders","MIMEMessage","mixed","alt","related","messages","generateBoundaries","asRaw","plaintext","getMessageByType","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","getAttachments","a","boundaries","inlineAttachments","getInlineAttachments","dumpTextContent","asEncoded","toBase64WebSafe","boundary","msg","matcher","_context10","_context12","_context11","addAttachment","opts","_context13","_context14","_context15","filename","contentType","validateContentType","encoding","validContentTransferEncodings","contentId","inline","_Object$assign","_addMessage","addMessage","_context16","_context18","_context19","validTypes","_context17","charset","setSender","mailbox","getSender","setRecipients","recs","_input","getRecipients","setRecipient","setTo","setCc","setBcc","setSubject","getSubject","_context20","_context21","_context22","_context23","Base64","encode","encodeURI","createMimeMessage"],"mappings":"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","x_google_ignoreList":[0]}